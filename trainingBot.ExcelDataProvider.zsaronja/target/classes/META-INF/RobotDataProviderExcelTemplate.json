{"id":"RobotDataProviderExcelTemplate","robotType":"ROBOT","mainClass":"com.appian.robot.core.template.RobotDataProviderExcelTemplate","actions":["start","processItem","end"],"conditionalActions":["startUp","hasMoreItems"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Initializes the data provider.\n \t *\n\t * Action \"start\".\n\t *\n\t * @throws Exception\n\t *             in case any exception is thrown during the initialization\n\t */\npublic void start() throws Exception {\n    server.info(\"Initializing Data Provider with file: \" + EXCEL_FILENAME);\n    // Path (String) to the file containing the items to process\n    excelFile = Paths.get(server.getCurrentDir(), EXCEL_FILENAME).toString();\n    // Initialization of the Data Provider module using the RowMapper implemented\n    dataProvider.init(excelFile, null, 0, new  ExcelRowMapper());\n    // Set the number of items relying on the Data Provider moduleĂ§\n    server.setNumberOfItems(dataProvider.count());\n}"},{"id":"processItem","implementation":"/**\n\t * Processes an item.\n\t * \n\t * In this template example, the processing consists of concatenating the first\n\t * 3 columns to get the string result and update the last column.\n\t */\npublic void processItem() {\n    // Get the current item through Data Provider\n    currentItem = dataProvider.getCurrentItem();\n    // The key to use is the literal \"row\" plus the number of the item\n    String itemKey = \"row \" + dataProvider.getCurrentItemNumber();\n    server.setCurrentItem(dataProvider.getCurrentItemNumber(), itemKey);\n    // The process is very simple: to concatenate the 3 columns to get the result\n    String result = currentItem.getCol1() + currentItem.getCol2() + currentItem.getCol3();\n    currentItem.setResult(result);\n    // Update the item in the Excel file through Data Provider\n    dataProvider.updateItem(currentItem);\n    // We consider this item is OK\n    server.setCurrentItemResultToOK(currentItem.getResult());\n}"},{"id":"end","implementation":"/**\n\t * Last action of the robot.\n\t */\npublic void end() {\n    server.info(\"End process\");\n}"}],"conditionalActionDetails":[{"id":"startUp","implementation":"/**\n\t * Action \"startUp\".\n\t * <p>\n\t * This method is overwritten to initialize the Appian RPA modules instances.\n\t */\n@Override\npublic boolean startUp() throws Exception {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    dataProvider = IJidokaDataProvider.getInstance(this, Provider.EXCEL);\n    return IRobot.super.startUp();\n}"},{"id":"hasMoreItems","implementation":"/**\n\t * Checks for more items.\n\t *\n\t * @return the string representing the wire name in the workflow to follow.\n\t */\npublic String hasMoreItems() {\n    // To get the next row, we rely again on the Data Provider module\n    return dataProvider.nextRow() ? \"yes\" : \"no\";\n}"}],"sdkMethods":[]}